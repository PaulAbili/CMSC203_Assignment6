import java.util.ArrayList;
public class Order implements OrderInterface, Comparable<Order>{
	private int orderNumber;
	private int orderTime;
	private Day orderDay;
	private Customer cust;
	private ArrayList<Beverage> orderList;

	public Order(int orderTime, Day orderDay, Customer cust) {
		this.orderTime = orderTime;
		this.orderDay = orderDay;
		this.cust = cust;
		orderList = new ArrayList<Beverage>();
		orderNumber = this.generateOrder();
	}
	/**
	 * 
	 * @return true if the day is a weekend day (Saturday or Sunday)
	 */
	public boolean isWeekend() {
		if(orderDay.equals(Day.SATURDAY) || orderDay.equals(Day.SUNDAY)) {
			return true;
		}
		return false;
	}

	/**
	 * returns the beverage listed in the itemNo of the order, for example if
	 * itemNo is 0 this method will return the first beverage in the order
	 * Note: this method returns the shallow copy of the Beverage
	 * 
	 * @return the beverage listed in the itemNo of the order or null if there
	 *         is no item in the order
	 * 
	 */
	public Beverage getBeverage(int itemNo) {
		return orderList.get(itemNo);
	}
	/**
	 * adds coffee order to this order
	 * @param bevName beverage name
	 * @param size beverage size of type SIZE
	 * @param extraShot true if the coffee beverage has extra shot , false otherwise
	 * @param extraSyrup true if the coffee beverage has extra syrup , false otherwise
	 */
	public void addNewBeverage(String bevName, Size size, boolean extraShot, boolean extraSyrup) {
		orderList.add(new Coffee(bevName, size, extraShot, extraSyrup));
	}

	/**
	 * adds alcohol order to this order
	 * @param bevName beverage name
	 * @param size beverage size
	 */ 
	public void addNewBeverage(String bevName, Size size) {
		orderList.add(new Alcohol(bevName, size, this.isWeekend()));
	}

	/**
	 * Adds the Smoothie beverage to this order
	 * @param bevName beverage name
	 * @param size beverage size
	 * @param numOfFruits number of fruits added 
	 * @param addProtein true if protein is added, false otherwise
	 */
	public void  addNewBeverage(String bevName, Size size, int numOfFruits, boolean addProtein) {
		orderList.add( new Smoothie(bevName, size, numOfFruits, addProtein));
	}

	/**
	 * Calculates and returns the total amount for this order
	 * @return total amount for this order
	 */
	public double calcOrderTotal() {
		double total = 0; 
		for(int i = 0; i < orderList.size(); i++) {
			total += getBeverage(i).calcPrice();
		}
		return total;
	}
	/**
	 * returns the number of beverages of same type in an order
	 * @param type the type of the beverage
	 * @return number of beverages of type type in this order
	 */
	public int findNumOfBeveType(Type type) {
		int counter = 0;
		for(int i = 0; i < orderList.size(); i++) {
			if(getBeverage(i).getType().equals(type)) {
				counter++;
			}

		}
		return counter;
	}

	public int compareTo(Order anotherOrder) {
		if(this.getOrderNo() > anotherOrder.getOrderNo()) {
			return 1;
		} else if(this.getOrderNo() < anotherOrder.getOrderNo()) {
			return -1;
		} else {
			return 0;
		}
	} 

	public int generateOrder() {
		int orderNumber = (int)((Math.random() * 90000)+ 1);
		return orderNumber;
 	}

	public Customer getCustomer() {
		return cust;
	}

	public Day getDay() {
		return orderDay;
	}

	public Day getOrderDay() {
		return orderDay;
	}

	public int getOrderNo() {
		return orderNumber;
	}

	public int getOrderTime() {
		return orderTime;
	}

	public int getTotalItems() {
		return orderList.size();
	}
	
	public String toString() {
		String str = "Order Number: " + this.getOrderNo() + "\n" + "Time: " + getOrderTime() 
		+ "\n" + "Day: " + getOrderDay() + "\n" + "Customer Name: " + getCustomer().getName() + "\n"
		+ "Age: " + getCustomer().getAge() + "\n";
		
		for(int i = 0; i < orderList.size(); i++) {
			str += orderList.get(i);
			str += "\n";
		}
		
		return str;
	}
}
